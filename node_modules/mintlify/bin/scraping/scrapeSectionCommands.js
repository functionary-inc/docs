import axios from "axios";
import { detectFramework, Frameworks } from "./detectFramework.js";
import { getHrefFromArgs, getOrigin } from "../util.js";
import { scrapeSection } from "./scrapeSection.js";
import { scrapeDocusaurusSection } from "./site-scrapers/scrapeDocusaurusSection.js";
import openNestedDocusaurusMenus from "./site-scrapers/openNestedDocusaurusMenus.js";
import { scrapeGitBookSection } from "./site-scrapers/scrapeGitBookSection.js";
import openNestedGitbookMenus from "./site-scrapers/openNestedGitbookMenus.js";
import { scrapeReadMeSection } from "./site-scrapers/scrapeReadMeSection.js";
import { startBrowser } from "../browser.js";
export async function scrapeSectionAxiosWrapper(argv, scrapeFunc) {
    const href = getHrefFromArgs(argv);
    const res = await axios.default.get(href);
    const html = res.data;
    await scrapeSection(scrapeFunc, html, getOrigin(href), argv.overwrite);
    process.exit(0);
}
export async function scrapeDocusaurusSectionCommand(argv) {
    await scrapeSectionOpeningAllNested(argv, openNestedDocusaurusMenus, scrapeDocusaurusSection);
}
export async function scrapeGitbookSectionCommand(argv) {
    await scrapeSectionOpeningAllNested(argv, openNestedGitbookMenus, scrapeGitBookSection);
}
async function scrapeSectionOpeningAllNested(argv, openLinks, scrapeFunc) {
    const href = getHrefFromArgs(argv);
    const browser = await startBrowser();
    const page = await browser.newPage();
    await page.goto(href, {
        waitUntil: "networkidle2",
    });
    const html = await openLinks(page);
    browser.close();
    await scrapeSection(scrapeFunc, html, getOrigin(href), argv.overwrite);
    process.exit(0);
}
export async function scrapeSectionAutomatically(argv) {
    const href = getHrefFromArgs(argv);
    const res = await axios.default.get(href);
    const html = res.data;
    const framework = detectFramework(html);
    validateFramework(framework);
    console.log("Detected framework: " + framework);
    if (framework === Frameworks.DOCUSAURUS) {
        await scrapeDocusaurusSectionCommand(argv);
    }
    else if (framework === Frameworks.GITBOOK) {
        await scrapeGitbookSectionCommand(argv);
    }
    else if (framework === Frameworks.README) {
        await scrapeSectionAxiosWrapper(argv, scrapeReadMeSection);
    }
}
function validateFramework(framework) {
    if (!framework) {
        console.log("Could not detect the framework automatically. Please use one of:");
        console.log("scrape-page-docusaurus");
        console.log("scrape-page-gitbook");
        console.log("scrape-page-readme");
        return process.exit(1);
    }
}
//# sourceMappingURL=scrapeSectionCommands.js.map