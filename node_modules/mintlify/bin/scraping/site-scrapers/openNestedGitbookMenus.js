export default async function openNestedGitbookMenus(page) {
    let prevEncountered = [];
    let encounteredHref = ["fake-href-to-make-loop-run-at-least-once"];
    // Loop until we've encountered every link
    while (!encounteredHref.every((href) => prevEncountered.includes(href))) {
        prevEncountered = encounteredHref;
        encounteredHref = await page.evaluate((encounteredHref) => {
            const icons = Array.from(document.querySelectorAll('path[d="M9 18l6-6-6-6"]'));
            const linksFound = [];
            icons.forEach(async (icon) => {
                var _a, _b;
                const toClick = (_a = icon === null || icon === void 0 ? void 0 : icon.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;
                const link = (_b = toClick === null || toClick === void 0 ? void 0 : toClick.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement;
                // Skip icons not in the side navigation
                if (!(link === null || link === void 0 ? void 0 : link.hasAttribute("href"))) {
                    return;
                }
                const href = link.getAttribute("href");
                // Should never occur but we keep it as a fail-safe
                if ((href === null || href === void 0 ? void 0 : href.startsWith("https://")) || (href === null || href === void 0 ? void 0 : href.startsWith("http://"))) {
                    return;
                }
                // Click any links we haven't seen before
                if (href && !encounteredHref.includes(href)) {
                    toClick === null || toClick === void 0 ? void 0 : toClick.click();
                }
                if (href) {
                    linksFound.push(href);
                }
            });
            return linksFound;
        }, encounteredHref // Need to pass array into the browser
        );
    }
    return await page.content();
}
//# sourceMappingURL=openNestedGitbookMenus.js.map